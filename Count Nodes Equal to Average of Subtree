//Approach 1
class Solution {
public:
int result=0;
int sum(TreeNode* root,int & cnt){
    if(!root) return 0;
    cnt++;
    int ls=sum(root->left,cnt);
    int rs=sum(root->right,cnt);
    return ls+rs+root->val;
}
void solve(TreeNode* root){
    if(!root) return;
    int cnt=0;
    int ts=sum(root,cnt);
    if(ts/cnt==root->val) result++;
    solve(root->left);
    solve(root->right);
}
    int averageOfSubtree(TreeNode* root) {
        
        solve(root);
        return result;

    }
};

//Approach 2
class Solution {
public:
int result=0;

pair<int,int>solve(TreeNode* root){
    if(!root) return {0,0};
    pair<int,int> a=solve(root->left);
    pair<int,int> b=solve(root->right);
    int ls=a.first;
    int lc=a.second;
    int rs=b.first;
    int rc=b.second;
    int sum=ls+rs+root->val;
    int cnt=lc+rc+1;
    if(root->val==sum/cnt) result++;
    return {sum,cnt};
}
    int averageOfSubtree(TreeNode* root) {
        
        solve(root);
        return result;

    }
};
