//Using priority queue
class Solution {
public:
typedef pair<int ,char>p;
    string reorganizeString(string s) {
        int n=s.length();
        vector<int>cnt(26,0);
        for(char &ch:s){
            cnt[ch-'a']++;
            if(cnt[ch-'a']>(n+1)/2)
            return "";
        }
        priority_queue<p,vector<p>>pq;
        for(char ch='a';ch<='z';ch++){
            if(cnt[ch-'a']>0)
            pq.push({cnt[ch-'a'],ch});
        }
        string result="";
        while(pq.size()>=2){
            auto p1=pq.top();
            pq.pop();
            auto p2=pq.top();
            pq.pop();
            result.push_back(p1.second);
            p1.first--;
            result.push_back(p2.second);
            p2.first--;
            if(p1.first>0) 
            pq.push(p1);
            if(p2.first>0)
            pq.push(p2);
        }
        if(!pq.empty()){
            result.push_back(pq.top().second);
        }
        return result;
    }
};

//without priority queue
class Solution {
public:
typedef pair<int ,char>p;
    string reorganizeString(string s) {
        int n=s.length();
        int maxfreq=0;
        char charmaxfreq;
        vector<int>cnt(26,0);
        for(char &ch:s){
            cnt[ch-'a']++;
            if(cnt[ch-'a']>maxfreq){
                maxfreq=cnt[ch-'a'];
                charmaxfreq=ch;
            }
            if(cnt[ch-'a']>(n+1)/2)
            return "";
        }
        string result=s;
        int i=0;
        while(cnt[charmaxfreq-'a']>0){
            result[i]=charmaxfreq;
            i+=2;
            cnt[charmaxfreq-'a']--;
        }
        for(char ch='a';ch<='z';ch++){
            while(cnt[ch-'a']>0){
                if(i>=n)
                    i=1;
                    result[i]=ch;
                i+=2;
                cnt[ch-'a']--;
            }
        }
        
        return result;
    }
};
