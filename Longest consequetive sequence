//Approach 1

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        int n=nums.size();
        if(n==0) return 0;
        sort(nums.begin(),nums.end());
        int ans=INT_MIN;
        int cnt=1;   
        int ls=INT_MIN;     
        for(int i=0;i<n;i++){
            if(nums[i]==ls+1){
                cnt++;
                ls=nums[i];
            }
            else if(nums[i]!=ls){
                cnt=1;
                ls=nums[i];
            }
            ans=max(ans,cnt);
                          
            }
            return ans;
        }
       
};

//Approach 2
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        int n=nums.size();
        if(n==0) return 0;
        unordered_set<int>st;
        int ans=1;
        for(int i=0;i<n;i++){
            st.insert(nums[i]);
        }
        for(auto it:st){
            if(st.find(it-1)==st.end()){
                int x=it;
                int cnt=1;
                while(st.find(x+1)!=st.end()){
                    cnt++;
                    x++;
                }
                ans=max(ans,cnt);
            }
        }
        return ans;
    }
};
